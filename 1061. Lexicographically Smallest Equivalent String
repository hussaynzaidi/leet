#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int parent[26];

// Find with path compression
int find(int x) {
    if (x != parent[x]) {
        parent[x] = find(parent[x]);
    }
    return parent[x];
}

// Union by lexicographically smaller root
void unite(int x, int y) {
    int px = find(x);
    int py = find(y);
    if (px == py) return;
    if (px < py)
        parent[py] = px;
    else
        parent[px] = py;
}

char* smallestEquivalentString(char* s1, char* s2, char* baseStr) {
    for (int i = 0; i < 26; i++) {
        parent[i] = i;
    }

    int len = strlen(s1);
    for (int i = 0; i < len; i++) {
        unite(s1[i] - 'a', s2[i] - 'a');
    }

    int n = strlen(baseStr);
    char* result = (char*)malloc(n + 1);

    for (int i = 0; i < n; i++) {
        int root = find(baseStr[i] - 'a');
        result[i] = 'a' + root;
    }
    result[n] = '\0';
    return result;
}
