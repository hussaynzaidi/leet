typedef struct {
    int* pp;
    int size;
} ProductOfNumbers;

ProductOfNumbers* productOfNumbersCreate() {
    ProductOfNumbers* obj = (ProductOfNumbers*)malloc(sizeof(ProductOfNumbers));
    obj->pp = (int*)malloc(sizeof(int) * 40000);
    obj->pp[0] = 1;
    obj->size = 0;

    return obj;
}

void productOfNumbersAdd(ProductOfNumbers* obj, int num) {
    if (num == 0) {
        obj->pp[0] = 1;
        obj->size = 0;
    } else {
        obj->pp[obj->size + 1] = obj->pp[obj->size] * num;
        obj->size++;
    }
}

int productOfNumbersGetProduct(ProductOfNumbers* obj, int k) {
    if (k > obj->size) {        return 0;    }
    return obj->pp[obj->size] / obj->pp[obj->size - k];
}

void productOfNumbersFree(ProductOfNumbers* obj) {
    free(obj->pp);
    free(obj);
}
