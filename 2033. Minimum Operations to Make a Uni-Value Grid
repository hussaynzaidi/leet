int compare(const void* a, const void* b) { return (*(int*)a - *(int*)b); }

int abs(int a) { return a < 0 ? -a : a; }
int minOperations(int** grid, int gridSize, int* gridColSize, int x) {
    int* nums = (int*)malloc(sizeof(int) * (gridSize * (*gridColSize)));

    int length = gridSize * (*gridColSize);
    int c = 0;
    long long r = 0;
    for (int i = 0; i < gridSize; i++) {
        for (int j = 0; j < *gridColSize; j++) {
            if (grid[0][0] % x != grid[i][j] % x)
                return -1;
            nums[c] = grid[i][j];
            c++;
        }
    }
    qsort(nums, length, sizeof(int), compare);
    int finalCommon = nums[length / 2];
    for (int i = 0; i < length; i++) {
        r += abs(finalCommon - nums[i]) / x;
    }
    free(nums);
    return (int)r;
}
