#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

void bfs(int startNode, int* edges, int n, int* dist) {
    int* q = (int*)malloc(n * sizeof(int));
    int front = 0, rear = 0;

    int* visited = (int*)calloc(n, sizeof(int));
    for (int i = 0; i < n; i++) dist[i] = INT_MAX;

    dist[startNode] = 0;
    q[rear++] = startNode;

    while (front < rear) {
        int node = q[front++];
        if (visited[node]) continue;

        visited[node] = 1;
        int neighbor = edges[node];
        if (neighbor != -1 && !visited[neighbor]) {
            dist[neighbor] = dist[node] + 1;
            q[rear++] = neighbor;
        }
    }

    free(q);
    free(visited);
}

int closestMeetingNode(int* edges, int edgesSize, int node1, int node2) {
    int* dist1 = (int*)malloc(edgesSize * sizeof(int));
    int* dist2 = (int*)malloc(edgesSize * sizeof(int));

    bfs(node1, edges, edgesSize, dist1);
    bfs(node2, edges, edgesSize, dist2);

    int minDistNode = -1;
    int minDistTillNow = INT_MAX;

    for (int i = 0; i < edgesSize; i++) {
        if (dist1[i] == INT_MAX || dist2[i] == INT_MAX) continue;
        int maxDist = dist1[i] > dist2[i] ? dist1[i] : dist2[i];
        if (maxDist < minDistTillNow) {
            minDistTillNow = maxDist;
            minDistNode = i;
        }
    }

    free(dist1);
    free(dist2);
    return minDistNode;
}
