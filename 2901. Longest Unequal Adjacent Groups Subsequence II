bool check(const char *s1, const char *s2) {
    if (strlen(s1) != strlen(s2)) {
        return false;
    }
    int diff = 0;
    for (int i = 0; s1[i]; i++) {
        if (s1[i] != s2[i]) {
            if (++diff > 1) {
                return false;
            }
        }
    }
    return diff == 1;
}

char **getWordsInLongestSubsequence(char **words, int wordsSize, int *groups,
                                    int groupsSize, int *returnSize) {
    int *dp = (int *)malloc(wordsSize * sizeof(int));
    int *prev = (int *)malloc(wordsSize * sizeof(int));
    for (int i = 0; i < wordsSize; i++) {
        dp[i] = 1;
        prev[i] = -1;
    }
    int maxIndex = 0;
    for (int i = 1; i < wordsSize; i++) {
        for (int j = 0; j < i; j++) {
            if (check(words[i], words[j]) && dp[j] + 1 > dp[i] &&
                groups[i] != groups[j]) {
                dp[i] = dp[j] + 1;
                prev[i] = j;
            }
        }
        if (dp[i] > dp[maxIndex]) {
            maxIndex = i;
        }
    }

    int count = 0;
    for (int i = maxIndex; i >= 0; i = prev[i]) {
        count++;
    }

    char **ans = (char **)malloc(count * sizeof(char *));
    int index = 0;
    for (int i = maxIndex; i >= 0; i = prev[i]) {
        ans[index++] = words[i];
    }
    for (int i = 0; i < count / 2; i++) {
        char *temp = ans[i];
        ans[i] = ans[count - 1 - i];
        ans[count - 1 - i] = temp;
    }

    *returnSize = count;
    free(dp);
    free(prev);
    return ans;
}
