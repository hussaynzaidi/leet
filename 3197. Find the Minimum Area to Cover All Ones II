int min(int a, int b) { return a < b ? a : b; }

int max(int a, int b) { return a > b ? a : b; }

int minimumSum2(int** grid, int gridSize, int* gridColSize, int u, int d, int l,
                int r) {
    int min_i = gridSize, max_i = 0;
    int min_j = gridColSize[0], max_j = 0;
    for (int i = u; i <= d; i++) {
        for (int j = l; j <= r; j++) {
            if (grid[i][j] == 1) {
                min_i = min(min_i, i);
                min_j = min(min_j, j);
                max_i = max(max_i, i);
                max_j = max(max_j, j);
            }
        }
    }
    return min_i <= max_i ? (max_i - min_i + 1) * (max_j - min_j + 1)
                          : INT_MAX / 3;
}

int** rotate(int** vec, int vecSize, int* vecColSize, int* returnSize,
             int** returnColSizes) {
    int n = vecSize, m = vecColSize[0];
    *returnSize = m;
    *returnColSizes = (int*)malloc(m * sizeof(int));
    int** ret = (int**)malloc(m * sizeof(int*));
    for (int i = 0; i < m; i++) {
        ret[i] = (int*)malloc(n * sizeof(int));
        (*returnColSizes)[i] = n;
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            ret[m - j - 1][i] = vec[i][j];
        }
    }
    return ret;
}

int solve(int** grid, int gridSize, int* gridColSize) {
    int n = gridSize, m = gridColSize[0];
    int res = n * m;
    for (int i = 0; i + 1 < n; i++) {
        for (int j = 0; j + 1 < m; j++) {
            res = min(
                res, minimumSum2(grid, n, gridColSize, 0, i, 0, m - 1) +
                         minimumSum2(grid, n, gridColSize, i + 1, n - 1, 0, j) +
                         minimumSum2(grid, n, gridColSize, i + 1, n - 1, j + 1,
                                     m - 1));
            res = min(
                res,
                minimumSum2(grid, n, gridColSize, 0, i, 0, j) +
                    minimumSum2(grid, n, gridColSize, 0, i, j + 1, m - 1) +
                    minimumSum2(grid, n, gridColSize, i + 1, n - 1, 0, m - 1));
        }
    }
    for (int i = 0; i + 2 < n; i++) {
        for (int j = i + 1; j + 1 < n; j++) {
            res = min(
                res,
                minimumSum2(grid, n, gridColSize, 0, i, 0, m - 1) +
                    minimumSum2(grid, n, gridColSize, i + 1, j, 0, m - 1) +
                    minimumSum2(grid, n, gridColSize, j + 1, n - 1, 0, m - 1));
        }
    }
    return res;
}

int minimumSum(int** grid, int gridSize, int* gridColSize) {
    int returnSize;
    int* returnColSizes;
    int** rgrid =
        rotate(grid, gridSize, gridColSize, &returnSize, &returnColSizes);
    int res = min(solve(grid, gridSize, gridColSize),
                  solve(rgrid, returnSize, returnColSizes));
    for (int i = 0; i < returnSize; i++) {
        free(rgrid[i]);
    }
    free(rgrid);
    free(returnColSizes);
    return res;
}
