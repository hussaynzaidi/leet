typedef struct {
    int key;
    UT_hash_handle hh;
} Item;

Item* find(Item** obj, int key) {
    Item* entry = NULL;
    HASH_FIND_INT(*obj, &key, entry);
    return entry;
}

bool add(Item** obj, int key) {
    if (find(obj, key)) {
        return false;
    }
    Item* entry = (Item*)malloc(sizeof(Item));
    entry->key = key;
    HASH_ADD_INT(*obj, key, entry);
    return true;
}
int minOperations(int* nums, int numsSize, int k) {
    Item* st = NULL;
    int count = 0;
    for (int i = 0; i < numsSize; i++) {
        if (nums[i] < k) {
            return -1;
        } else if (nums[i] > k) {
            add(&st, nums[i]);
        }
    }
    return HASH_COUNT(st);
}
