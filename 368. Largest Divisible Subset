int compare(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

int* largestDivisibleSubset(int* nums, int numsSize, int* returnSize) {
    qsort(nums, numsSize, sizeof(int), compare);

    int* dp = (int*)malloc(sizeof(int) * numsSize);
    int* prev = (int*)malloc(sizeof(int) * numsSize);
    for (int i = 0; i < numsSize; i++) {
        dp[i] = 1;
        prev[i] = -1;
    }

    int maxi = 0;
    for (int i = 1; i < numsSize; i++) {
        for (int j = 0; j < i; j++) {
            if (nums[i] % nums[j] == 0 && dp[i] < dp[j] + 1) {
                dp[i] = dp[j] + 1;
                prev[i] = j;
            }
        }
        if (dp[i] > dp[maxi]) {
            maxi = i;
        }
    }

    int length = dp[maxi];
    *returnSize = length;
    int* result = (int*)malloc(sizeof(int) * length);
    int index = maxi;
    for (int i = length - 1; i >= 0; i--) {
        result[i] = nums[index];
        index = prev[index];
    }

    free(dp);
    free(prev);
    return result;
}
