void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}
void bt(int * nums, int start, int n, int ** result, int * count){
    if (start == n){
        result[*count] = (int *) malloc(n * sizeof(int));
        for(int i = 0; i < n; i++)
        {
            result[*count][i] = nums[i];
        }
        (*count)++;
        return;
    }
    for(int i = start; i < n; i++)
    {
         swap(&nums[start], &nums[i]);  
        bt(nums, start + 1, n, result, count);  
        swap(&nums[start], &nums[i]);
    }
}
int** permute(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
   int mp = 1;
   for(int i = 1; i <= numsSize; i++)
   {
        mp *= i;
   }
   int ** result = (int **) malloc(mp * sizeof(int *));
   *returnColumnSizes = (int *) malloc(mp * sizeof(int));
   int count = 0;
   bt(nums, 0, numsSize, result, &count);
   *returnSize = count;
   for(int i = 0; i < count; i++)
   {
    (*returnColumnSizes)[i] = numsSize;
   } 
   return result;
}
