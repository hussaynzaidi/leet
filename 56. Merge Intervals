int max(int a, int b) { return a > b ? a : b; }
int comp( const void*a, const void* b)
 {
    int* x = *(int **)a;
    int* y = *(int **)b;
    return x[0] == y[0] ? y[1] - x[1] : x[0] - y[0];
 }
int** merge(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize, int** returnColumnSizes) {
    qsort(intervals, intervalsSize, sizeof(int*), comp);

    int ** merged = malloc(sizeof(int*) * intervalsSize);
    for(int i = 0; i < intervalsSize; i++) merged[i] = malloc(sizeof(int) * 2);
    memcpy(merged[0], intervals[0], 2 * sizeof(int));
    int t = 0;
    for(int i = 1; i < intervalsSize; i++)
    {
        int l = intervals[i][0], r = intervals[i][1];
        if(l <= merged[t][1]) {
            merged[t][1] = max(merged[t][1], r);
        } else {
            memcpy(merged[++t], intervals[i], 2 * sizeof(int));
        }
    }
    ++t;
    *returnSize = t;
    *returnColumnSizes = malloc(sizeof(int) * t);
    for(int i = 0; i< t; i++){ (*returnColumnSizes)[i] = 2;}
    return merged;
}
