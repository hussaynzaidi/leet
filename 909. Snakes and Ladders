#define MAXN 10000  // Max board size (100x100)

// Queue implementation
typedef struct {
    int data[MAXN];
    int front, rear;
} Queue;

void initQueue(Queue* q) {
    q->front = q->rear = 0;
}

void enqueue(Queue* q, int val) {
    q->data[q->rear++] = val;
}

int dequeue(Queue* q) {
    return q->data[q->front++];
}

bool isEmpty(Queue* q) {
    return q->front == q->rear;
}

// Convert square number to board indices
void getBoardPos(int sqr, int n, int* row, int* col) {
    int r = (sqr - 1) / n;
    int c = (sqr - 1) % n;
    if (r % 2 == 1) c = n - 1 - c;
    *row = n - 1 - r;
    *col = c;
}

int snakesAndLadders(int** board, int boardSize, int* boardColSize) {
    int n = boardSize;
    bool* visited = (bool*)calloc(n * n + 1, sizeof(bool));

    Queue q;
    initQueue(&q);
    enqueue(&q, 1);
    visited[1] = true;

    int steps = 0;
    while (!isEmpty(&q)) {
        int size = q.rear - q.front;
        for (int i = 0; i < size; i++) {
            int curr = dequeue(&q);
            if (curr == n * n) {
                free(visited);
                return steps;
            }
            for (int next = curr + 1; next <= curr + 6 && next <= n * n; next++) {
                int r, c;
                getBoardPos(next, n, &r, &c);
                int dest = board[r][c] == -1 ? next : board[r][c];
                if (!visited[dest]) {
                    visited[dest] = true;
                    enqueue(&q, dest);
                }
            }
        }
        steps++;
    }

    free(visited);
    return -1;
}
